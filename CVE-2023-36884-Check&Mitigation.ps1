<#
.SYNOPSIS
   This script is used to check and remediate to CVE-2023-36884 hardening

.DESCRIPTION
   This script is used to check and remediate to CVE-2023-36884 hardening : https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36884
   This scripts checks if Microsoft hardening recommendations are properly applied.
   Microsoft says https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36884 that:
        "Add the following application names to this registry key as values of type REG_DWORD with data 1.:
Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BLOCK_CROSS_PROTOCOL_FILE_NAVIGATION
    Excel.exe
    Graph.exe
    MSAccess.exe
    MSPub.exe
    Powerpnt.exe
    Visio.exe
    WinProj.exe
    WinWord.exe
    Wordpad.exe"

    This script is based on the script from Maxime Alay-Eddine (https://github.com/tarraschk/CVE-2023-36884-Checker/)

    This script supports ShouldProcess (-Whatif, -confirm - Verbose)

    This script has passed PSScriptAnalyzer with success.
    This script is design to be run in interactive mode (Human mode) or in no-interactive mode (in a scheduled task)

.EXAMPLE
    .\cve-2023-36884-Check&Mitigation.ps1
    Run the script in Check-mode only

.EXAMPLE
       .\cve-2023-36884-Check&Mitigation.ps1 -WithMitigation
    Run the script in Check-mode and Mitigation-Mode
    The remediation requires RunAsAdministrator Mode. The script test and auto-elevate if necessary.

.EXAMPLE
       .\cve-2023-36884-Check&Mitigation.ps1 -WithMitigation -Whatif
    Run the script in Check-mode and Mitigation-Mode (simulation only)
    The remediation requires RunAsAdministrator Mode. The script test and auto-elevate if necessary.

.EXAMPLE
       .\cve-2023-36884-Check&Mitigation.ps1 -WithMitigation -Whatif -Verbose
    Run the script in Check-mode and Mitigation-Mode (simulation only) with the Verbose Mode enabled
    The remediation requires RunAsAdministrator Mode. The script test and auto-elevate if necessary.

.EXAMPLE
    Get-Help .\cve-2023-36884-Check&Mitigation.ps1 -ShowWindow
    Show complete help about this script on a separate window

.PARAMETER WithMitigation
    Remediation if passed
    Compatible with -Whatif usage

.INPUTS
   None

.OUTPUTS
   Shell only

.NOTES
    Author  : O. FERRIERE
    Date    : 18/07/2022
    Version : 1.0
    Changes : V1.0 - 18/07/2022 - Initial Version (based on https://github.com/tarraschk/CVE-2023-36884-Checker/)

.LINK
    https://github.com/tarraschk/CVE-2023-36884-Checker/
    https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36884
    https://github.com/myusefulrepo/Tips/blob/master/CVE-2023-36884-Check%26Mitigation.ps1
#>

[CmdletBinding(SupportsShouldProcess)]
Param
(
    # Remediation if passed
    [Parameter()]
    [switch]$WithMitigation
)

Begin
{
    Write-Verbose 'Declarations'
    $key = 'HKLM:\SOFTWARE\Policies\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BLOCK_CROSS_PROTOCOL_FILE_NAVIGATION'
    Write-Verbose "Variable Key is set to : [$key]"
    $Applications = @('Excel.exe', 'Graph.exe', 'MSAccess.exe', 'MSPub.exe', 'PowerPnt.exe', 'Visio.exe', 'WinProj.exe', 'WinWord.exe', 'Wordpad.exe')
    Write-Verbose "Variable Application is set to : [$($Applications -join ' - ')]"

    Write-Verbose 'Loading Function Test-RegistryValue'
    function Test-RegistryValue
    {
        param (
            [parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$Path,
            [parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][string]$Value
        )
        try
        {
            $Val = Get-ItemProperty -Path $Path -ErrorAction Stop | Select-Object -ExpandProperty $Value -ErrorAction Stop
            if ($Val -eq 1)
            {
                $True
            }
            else
            {
                $False
            }
        }
        catch
        {
            $False
        }
    }

    Write-Verbose 'Loading function Use-RunAs'
    function Test-AndElevate
    {
        $isAdmin = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        if ($isAdmin)
        {
            Write-Verbose '-PowerShell is already running as administrator.'
        }
        else
        {
            Write-Output 'PowerShell is not running as administrator. Attempting to elevate...'
            Start-Process powershell -Verb runAs -ArgumentList "-NoExit -Command { Write-Output 'New elevated PowerShell session started.'}"
        }
    }

    Write-Verbose 'Setting Preferences'
    if (-not $PSBoundParameters.ContainsKey('Verbose'))
    {
        $VerbosePreference = $PSCmdlet.SessionState.PSVariable.GetValue('VerbosePreference')
    }
    if (-not $PSBoundParameters.ContainsKey('Confirm'))
    {
        $ConfirmPreference = $PSCmdlet.SessionState.PSVariable.GetValue('ConfirmPreference')
    }
    if (-not $PSBoundParameters.ContainsKey('WhatIf'))
    {
        $WhatIfPreference = $PSCmdlet.SessionState.PSVariable.GetValue('WhatIfPreference')
    }
    Write-Verbose ('[{0}] Confirm={1} ConfirmPreference={2} WhatIf={3} WhatIfPreference={4}' -f $MyInvocation.MyCommand, $Confirm, $ConfirmPreference, $WhatIf, $WhatIfPreference)
    Write-Verbose "Script : $($MyInvocation.MyCommand)"
    Write-Verbose "VerbosePreference : $VerbosePreference"
    Write-Verbose "ConfimrPreference : $ConfirmPreference"
    Write-Verbose "WhatIfPreference : $WhatIfPreference"


    Write-Verbose 'Beginning compliance test to CVE-2023-36884'
    $Result = $True # init $Result to $true
    foreach ($app in $applications)
    {
        Write-Verbose "Testing [$Key] and key [$App]"
        $Resource = Test-RegistryValue -Value $app -Path $key
        if ($Resource)
        {
            Write-Output "DEBUG:OK, $app has CVE-2023-36884 mitigation enabled"
        }
        else
        {
            $Result = $False
            Write-Output "DEBUG:KO, $app FEATURE_BLOCK_CROSS_PROTOCOL_FILE_NAVIGATION should be set to 1"
        }
    }

    if ($result)
    {
        Write-Output '==> META:hardening-CVE-2023-36884 | OK'
    }
    else
    {
        Write-Warning '==> META:hardening-CVE-2023-36884 | KO'
    }

}
Process
{
    if ($WithMitigation)
    {
        Write-Verbose 'Beginning remediation to CVE-2023-36884'
        Write-Verbose '- Check if the script is running on RunAsAdministrator mode. if not : launch a new Powershell in RunAsAdministrator'
        Test-AndElevate
        Write-Verbose "- Test if [$key] is still existing"
        if (-not (Test-Path $key))
        {
            Write-Verbose "The Key [$key] doesn't exist, creation"
            New-Item -Path $key -Force | Out-Null
        }

        Write-Verbose 'Beginning Applications remediation'
        foreach ($app in $applications)
        {
            try
            {
                New-ItemProperty -Path $key -Name $app -Value 1 -PropertyType Dword -ErrorAction SilentlyContinue | Out-Null
                Write-Output "- A new registry key for [$app] was created or/and set to 1"
            }
            catch
            {
                Write-Error 'Houps an error occurs when creating/setting registry Key'
                $_.InvocationInfo.MuCommand.Name
                $_.ErrorDetails.Message.message
                $_.InvocationInfo.PositionMessage
                $_.CategoryInfo.ToString()
                $_.FullyQualifiedErrorId
            }
        }
    }
}

End
{
    Write-Output 'SCRIPT DONE'
}
